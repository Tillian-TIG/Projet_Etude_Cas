/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.raven.form;

import com.mycompany.hopital.Login_form;
import com.raven.datechooser.EventDateChooser;
import com.raven.datechooser.SelectedAction;
import com.raven.datechooser.SelectedDate;
import icon.tableaction;
import icon.tablecelleditor;
import icon.tablecellrender;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import table.TableCustom;

/**
 *
 * @author Trafiquant de Tigbé
 */
public class paiement extends javax.swing.JPanel {
 private static final String username = "root";
 private static final String password = "primatologue";
 private static final String dataConn = "jdbc:mysql://localhost:3306/hopital";
 
 Connection sqlConn = null;
 Connection sqlSearch = null;
 PreparedStatement pst = null;
 PreparedStatement pst_search = null;
 ResultSet rs = null;
 ResultSet rs_2 = null;
 PreparedStatement pst_tab = null;
 ResultSet rs_tab = null;
 int q, i , id, deleteItem;

    /**
     * Creates new form Jpanel_admin_Medecin
     */
    public paiement() {
        initComponents();
        setOpaque(false);
        tab_all_patient();
        
        
        tableaction event = new tableaction() {
            @Override
            public void payer(int row) {
                
               
                 
                 
                 
                 
               // int selectrow = table.getSelectedRow();
                    //String nom = table.getValueAt(selectrow, 0).toString();
                    //String prenom = table.getValueAt(selectrow, 1).toString();
                    //int row2 = table.getSelectedRow();
                     //int column = table.getSelectedColumn();

    // Récupérer les données de la cellule cliquée
                //    Object value = table.getValueAt(row2, 1);
                  
                // paiement(nom, prenom);
                //tab_all_patient();
                //update();
                // JOptionPane.showMessageDialog(null, "Suprimer"+nom); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
            @Override
            public void imprimer(int row) { 
               
                 // String nom = table.getValueAt(selectrow, 0).toString();
                  //  String prenom = table.getValueAt(selectrow, 1).toString();
                    // tab_all_patient();   
                    //facture(nom, prenom);
                 
                  // JOptionPane.showMessageDialog(null, "Suprimer"+nom); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody 
               
                // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

           
        };
        
       
           JTable.getColumnModel().getColumn(8).setCellRenderer(new tablecellrender());
         
              JTable.getColumnModel().getColumn(8).setCellEditor(new tablecelleditor(event));
      
        TableCustom.apply(jScrollPanel_all, TableCustom.TableType.DEFAULT);
       // getContentPane().setBackground(new Color(240, 240, 240));
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        recu = new javax.swing.JTextArea();
        textsearch1 = new textfield.textsearch();
        jPanel1 = new javax.swing.JPanel();
        tabbedPaneCustom1 = new raven.tabbed.TabbedPaneCustom();
        all_patient = new com.raven.swing.PanelBorder();
        jScrollPanel_all = new javax.swing.JScrollPane();
        JTable = new javax.swing.JTable();

        recu.setColumns(20);
        recu.setRows(5);
        jScrollPane1.setViewportView(recu);

        setBackground(new java.awt.Color(25, 110, 129));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        textsearch1.setText("Recherche");
        textsearch1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textsearch1MouseClicked(evt);
            }
        });
        textsearch1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textsearch1KeyReleased(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(25, 110, 129));
        jPanel1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jPanel1formAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1formKeyPressed(evt);
            }
        });

        tabbedPaneCustom1.setBackground(new java.awt.Color(25, 110, 129));
        tabbedPaneCustom1.setForeground(new java.awt.Color(255, 255, 255));
        tabbedPaneCustom1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabbedPaneCustom1MouseClicked(evt);
            }
        });
        tabbedPaneCustom1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabbedPaneCustom1KeyPressed(evt);
            }
        });

        JTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nom", "Prenom", "Contact", "Adresse", "Date Enregistrement", "Service", "Analyse", "Etat", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTable.setRowHeight(40);
        JTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableMouseClicked(evt);
            }
        });
        jScrollPanel_all.setViewportView(JTable);

        javax.swing.GroupLayout all_patientLayout = new javax.swing.GroupLayout(all_patient);
        all_patient.setLayout(all_patientLayout);
        all_patientLayout.setHorizontalGroup(
            all_patientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, all_patientLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPanel_all, javax.swing.GroupLayout.DEFAULT_SIZE, 1032, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        all_patientLayout.setVerticalGroup(
            all_patientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, all_patientLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPanel_all, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        tabbedPaneCustom1.addTab("Liste des patient", all_patient);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(tabbedPaneCustom1, javax.swing.GroupLayout.PREFERRED_SIZE, 1049, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneCustom1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(684, Short.MAX_VALUE)
                .addComponent(textsearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(textsearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(602, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(70, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(21, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        tab_all_patient();
    }//GEN-LAST:event_formKeyPressed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
        tab_all_patient();
    }//GEN-LAST:event_formAncestorAdded

    private void jPanel1formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jPanel1formAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1formAncestorAdded

    private void jPanel1formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1formKeyPressed

    private void JTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableMouseClicked
        // TODO add your handling code here:
        //tab_all_patient();

        test panel2 = new test();
        panel2.setVisible(true);
        if(panel2.isVisible())
        {
            setEnabled(false);
            //  setVisible(false);
            int selectedRowIndex = JTable.getSelectedRow();
            TableModel model = JTable.getModel();
            String nm = model.getValueAt(selectedRowIndex, 0).toString();

            panel2.pack();
            panel2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            panel2.txt.setText(nm);
        }
        else
        {
            setEnabled(true);
            setEnabled(true);
            // setVisible(true);
        }
        // Form_Home_Users panel2 = new Form_Home_Users();

        // Configurer le contenu du JPanel2 (ajouter des étiquettes, des boutons, etc.)

        //int option = JOptionPane.showOptionDialog(null, panel2, "Titre du popup", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, new Object[]{}, null);

        //  int result = JOptionPane.showOptionDialog(null, panel2, "Titre du popup", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, new Object[]{}, null);

        //Object value = JTable.getValueAt(selectedRowIndex, 0);
        //txt.setT
        // String nom = value.toString();
        //System.out.println(nom);
        // nnm.setText(nom);

        //panel2.txt.setText(nom);

        //Object selectedValue = JTable.getValueAt(selectedRowIndex, 0);
        //String nom = selectedValue.toString();
        //Form_Home_Users use = new Form_Home_Users();
        //use.setVisible(true);
        //DefaultTableModel table = (DefaultTableModel)JTable.getModel();
        //int select = JTable.getSelectedRow();
        //String nn = table.getValueAt(select, 1).toString();
        //nnm.setText(nn);

        // use.nom = table.getValueAt(select, 0).toString();

    }//GEN-LAST:event_JTableMouseClicked

    private void tabbedPaneCustom1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabbedPaneCustom1MouseClicked
        // TODO add your handling code here:
        tab_all_patient();

    }//GEN-LAST:event_tabbedPaneCustom1MouseClicked

    private void tabbedPaneCustom1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabbedPaneCustom1KeyPressed
        // TODO add your handling code here:
        tab_all_patient();

    }//GEN-LAST:event_tabbedPaneCustom1KeyPressed

    private void textsearch1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textsearch1KeyReleased
        // TODO add your handling code here:
        if (textsearch1.getText().trim().isEmpty() || textsearch1.getText().equalsIgnoreCase("recherche")){
            String id = null;
            id = textsearch1.getText();

            tab_all_patient();

        }
        else{
            DefaultTableModel model = (DefaultTableModel) JTable.getModel();

            model.setRowCount(0);

            try {
                Class.forName("com.mysql.jdbc.Driver");
                sqlConn = DriverManager.getConnection(dataConn,username,password);
                String sql = "SELECT * FROM consultation,service,type_analyse WHERE nomPatient LIKE ? and id_service = id and id_serv = id";
                PreparedStatement statement = sqlConn.prepareStatement(sql);
                statement.setString(1, "%" + textsearch1.getText() + "%");
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {
                    String column1Data = resultSet.getString("nomPatient");
                    String column2Data = resultSet.getString("prenomPatient");
                    String column3Data = resultSet.getString("telephone");
                    String column4Data = resultSet.getString("adresse");
                    String column5Data = resultSet.getString("date_consultation");
                    String column6Data = resultSet.getString("service_libelle");
                    String column7Data = resultSet.getString("libelle_analyse");
                    String column8Data = resultSet.getString("etat");

                    // Ajouter d'autres colonnes si nécessaire

                    model.addRow(new Object[]{column1Data, column2Data, column3Data, column4Data, column5Data, column6Data, column7Data, column8Data});

                }
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_textsearch1KeyReleased

    private void textsearch1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textsearch1MouseClicked
        // TODO add your handling code here:
        textsearch1.setText("");
    }//GEN-LAST:event_textsearch1MouseClicked
 
    public void date()
    {
    Date d = new Date();
    SimpleDateFormat dat = new SimpleDateFormat("EEEE-dd-MMM-yyyy");
    
    }
     
     
     public void paiemente(String nom , String prenom)
     {
         Date d = new Date();
             java.sql.Date ladate = new java.sql.Date(d.getTime());
                String montant = "5000"; 
         try {
             Class.forName("com.mysql.jdbc.Driver");
                sqlConn = DriverManager.getConnection(dataConn,username,password);
                pst_search = sqlConn.prepareCall("Select * from consultation where nomPatient=? and prenomPatient=?");
                    pst_search.setString(1, nom);
                    pst_search.setString(2, prenom);
                    rs_2 = pst_search.executeQuery();
                    if(rs_2.next())
                    {
                        if(rs_2.getString("etat").equalsIgnoreCase("payer"))
                        {
                            JOptionPane.showMessageDialog(null, "Frais de consultation déja payé");
                        }
                        else{
                        pst = sqlConn.prepareStatement("insert into factureconsultation(id_consultation,idservice,type_analyse,nom,prenoms,prix,date) value(?,?,?,?,?,?,?)");
                //pst_search = sqlConn.prepareCall("Select * from consultation,factureconsultation where nomPatient=? and prenomPatient=? and date_consultation=? and etat='Non Payer' and factureconsultation.id_consultation=consultation.idConsultation");
                        pst.setString(1, rs_2.getString("idconsultation"));
                        pst.setString(2, rs_2.getString("id_service"));
                        pst.setString(3, rs_2.getString("typeanalyse"));
                         pst.setString(4, rs_2.getString("nomPatient"));
                         pst.setString(5, rs_2.getString("prenomPatient"));
                         pst.setString(6, montant);
                         pst.setDate(7, ladate);
                        pst.executeUpdate();
                        //$$$$***********************************
                        
                         pst_tab = sqlConn.prepareStatement("Update consultation set etat = 'Payer' where nomPatient = ? and prenomPatient = ?");
                        pst_tab.setString(1,rs_2.getString("nomPatient"));
                        pst_tab.setString(2, rs_2.getString("prenomPatient"));
                        
                        pst_tab.executeUpdate();
                    //UPADTE L'ETAT DE PAYEMENT DANS LLA TABLE CONSULTATION
                   
                      
                    JOptionPane.showMessageDialog(null, "Paiement éffectué avec succès au nom de"+rs_2.getString("nomPatient")+" "+rs_2.getString("prenomPatient"));
                        
                        JOptionPane.showMessageDialog(null, "Paiement enrégistré");
                    }
                 }
               
         } catch (Exception e) {
         }
     
     }
     
     public void facture(String nom ,String prenom)
     {
          String caisse = num_id();
               
                  
                  
                  recu.setText("*************************************************\n");
                  recu.setText(recu.getText()+"********    CENTRE HOSPITALIER    *******\n");
                  recu.setText(recu.getText()+"*************************************************\n");
                  recu.setText(recu.getText()+"                Recu de Piaement        \n");
                   Date d = new Date();
                     SimpleDateFormat dat = new SimpleDateFormat("EEEE-dd-MMM-yyyy");
                         String ladate = dat.format(d);
                     try {
                 Class.forName("com.mysql.jdbc.Driver");
                sqlConn = DriverManager.getConnection(dataConn,username,password);
                pst_tab = sqlConn.prepareStatement("Select * from consultation,service,type_analyse where nomPatient = ? and prenomPatient=? and id_service = id and id_serv=id");
                pst_tab.setString(1, nom);
                pst_tab.setString(2, prenom);
                rs_tab = pst_tab.executeQuery () ;
                while (rs_tab.next()) {
                    if(rs_tab.getString("etat").equalsIgnoreCase("payer"))
                    {
                            recu.setText(recu.getText()+"            Date : "+ladate+"\n");
                            recu.setText(recu.getText()+"*************************************************\n");
                            recu.setText(recu.getText()+"Nom : "+ rs_tab.getString("nomPatient")+"\n");
                            recu.setText(recu.getText()+"Prenom : "+ rs_tab.getString("prenomPatient")+"\n");
                            recu.setText(recu.getText()+"Contact : "+ rs_tab.getString("telephone")+"\n");
                            recu.setText(recu.getText()+"Prix : "+ rs_tab.getString("prix")+"\n");
                            recu.setText(recu.getText()+"Date de paiement : "+ladate+"\n");
                            recu.setText(recu.getText()+"Service : "+ rs_tab.getString("service_libelle")+"\n");
                            recu.setText(recu.getText()+ rs_tab.getString("libelle_analyse")+"\n");
                            recu.setText(recu.getText()+"************************************************\n");
                            recu.setText(recu.getText()+"                                    Signature\n");
                            recu.setText(recu.getText()+"                   Caissier : "+caisse+"\n");
                            recu.setText(recu.getText()+"************************************************\n");
                            recu.setText(recu.getText()+"*****              Bon Traitement              *****\n");
                            recu.setText(recu.getText()+"************************************************\n");
                            recu.print();
                        
                    }
                    // Ajouter d'autres colonnes si nécessaire
               }
            }
            catch (ClassNotFoundException | SQLException e) {
            }   catch (PrinterException ex) { 
                    Logger.getLogger(paiement.class.getName()).log(Level.SEVERE, null, ex);
                }
     }
     
      public void tab_all_patient ()
    {
        DefaultTableModel model = (DefaultTableModel) JTable.getModel();
            
            model.setRowCount(0);
            
            try {
                Class.forName("com.mysql.jdbc.Driver");
                sqlConn = DriverManager.getConnection(dataConn,username,password);
                pst_tab = sqlConn.prepareStatement("Select * from consultation,service,type_analyse where id_service = id and id_serv=id");
                rs_tab = pst_tab.executeQuery () ;
                while (rs_tab.next()) {
                    String column1Data = rs_tab.getString("nomPatient");
                    String column2Data = rs_tab.getString("prenomPatient");
                    String column3Data = rs_tab.getString("telephone");
                    String column4Data = rs_tab.getString("adresse");
                    String column5Data = rs_tab.getString("date_consultation");
                    String column6Data = rs_tab.getString("service_libelle");
                    String column7Data = rs_tab.getString("libelle_analyse");
                     String column8Data = rs_tab.getString("etat");

                    // Ajouter d'autres colonnes si nécessaire

                    model.addRow(new Object[]{column1Data, column2Data, column3Data, column4Data, column5Data, column6Data, column7Data, column8Data});
               }
            }
            
            catch (ClassNotFoundException | SQLException e) {
            }
       
    }
      
      public void update()
      {
          Form_Home_Caissier cai = new Form_Home_Caissier();
          cai.Form_Home_Caissier() ;
      }
       public String num_id()
    {
        String nom = null;
        String prenom = null;
        String name = null;
        String id = null;
        id = Login_form.txtid.getText();
          try {
            Class.forName("com.mysql.jdbc.Driver");
                 sqlConn = DriverManager.getConnection(dataConn,username,password);
                 pst = sqlConn.prepareCall("Select * from users where identifiant = ?");
                    pst.setString(1, id);
                        rs = pst.executeQuery();
                            if (rs.next())
                            {
                               nom = rs.getString("nom");
                               prenom = rs.getString("prenom");
                               name = nom.concat(" ").concat(prenom);
                            }
                               
        } catch (Exception e) {
        }
          return name;
    }
       
       
         
     
    
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable JTable;
    private com.raven.swing.PanelBorder all_patient;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPanel_all;
    private javax.swing.JTextArea recu;
    private raven.tabbed.TabbedPaneCustom tabbedPaneCustom1;
    private textfield.textsearch textsearch1;
    // End of variables declaration//GEN-END:variables
}
